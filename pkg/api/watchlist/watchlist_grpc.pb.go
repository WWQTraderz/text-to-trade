// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: watchlist/watchlist.proto

package watchlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WatchlistService_GetWatchlist_FullMethodName    = "/watchlist.WatchlistService/GetWatchlist"
	WatchlistService_ListWatchlists_FullMethodName  = "/watchlist.WatchlistService/ListWatchlists"
	WatchlistService_CreateWatchlist_FullMethodName = "/watchlist.WatchlistService/CreateWatchlist"
	WatchlistService_UpdateWatchlist_FullMethodName = "/watchlist.WatchlistService/UpdateWatchlist"
)

// WatchlistServiceClient is the client API for WatchlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchlistServiceClient interface {
	GetWatchlist(ctx context.Context, in *WatchlistRequest, opts ...grpc.CallOption) (*WatchlistResponse, error)
	ListWatchlists(ctx context.Context, in *WatchlistRequest, opts ...grpc.CallOption) (*WatchlistListResponse, error)
	CreateWatchlist(ctx context.Context, in *Watchlist, opts ...grpc.CallOption) (*WatchlistResponse, error)
	UpdateWatchlist(ctx context.Context, in *Watchlist, opts ...grpc.CallOption) (*WatchlistResponse, error)
}

type watchlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchlistServiceClient(cc grpc.ClientConnInterface) WatchlistServiceClient {
	return &watchlistServiceClient{cc}
}

func (c *watchlistServiceClient) GetWatchlist(ctx context.Context, in *WatchlistRequest, opts ...grpc.CallOption) (*WatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_GetWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) ListWatchlists(ctx context.Context, in *WatchlistRequest, opts ...grpc.CallOption) (*WatchlistListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchlistListResponse)
	err := c.cc.Invoke(ctx, WatchlistService_ListWatchlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) CreateWatchlist(ctx context.Context, in *Watchlist, opts ...grpc.CallOption) (*WatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_CreateWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) UpdateWatchlist(ctx context.Context, in *Watchlist, opts ...grpc.CallOption) (*WatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_UpdateWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchlistServiceServer is the server API for WatchlistService service.
// All implementations must embed UnimplementedWatchlistServiceServer
// for forward compatibility
type WatchlistServiceServer interface {
	GetWatchlist(context.Context, *WatchlistRequest) (*WatchlistResponse, error)
	ListWatchlists(context.Context, *WatchlistRequest) (*WatchlistListResponse, error)
	CreateWatchlist(context.Context, *Watchlist) (*WatchlistResponse, error)
	UpdateWatchlist(context.Context, *Watchlist) (*WatchlistResponse, error)
	mustEmbedUnimplementedWatchlistServiceServer()
}

// UnimplementedWatchlistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatchlistServiceServer struct {
}

func (UnimplementedWatchlistServiceServer) GetWatchlist(context.Context, *WatchlistRequest) (*WatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) ListWatchlists(context.Context, *WatchlistRequest) (*WatchlistListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatchlists not implemented")
}
func (UnimplementedWatchlistServiceServer) CreateWatchlist(context.Context, *Watchlist) (*WatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) UpdateWatchlist(context.Context, *Watchlist) (*WatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) mustEmbedUnimplementedWatchlistServiceServer() {}

// UnsafeWatchlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchlistServiceServer will
// result in compilation errors.
type UnsafeWatchlistServiceServer interface {
	mustEmbedUnimplementedWatchlistServiceServer()
}

func RegisterWatchlistServiceServer(s grpc.ServiceRegistrar, srv WatchlistServiceServer) {
	s.RegisterService(&WatchlistService_ServiceDesc, srv)
}

func _WatchlistService_GetWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).GetWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_GetWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).GetWatchlist(ctx, req.(*WatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_ListWatchlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).ListWatchlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_ListWatchlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).ListWatchlists(ctx, req.(*WatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_CreateWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Watchlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).CreateWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_CreateWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).CreateWatchlist(ctx, req.(*Watchlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_UpdateWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Watchlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).UpdateWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_UpdateWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).UpdateWatchlist(ctx, req.(*Watchlist))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchlistService_ServiceDesc is the grpc.ServiceDesc for WatchlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "watchlist.WatchlistService",
	HandlerType: (*WatchlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWatchlist",
			Handler:    _WatchlistService_GetWatchlist_Handler,
		},
		{
			MethodName: "ListWatchlists",
			Handler:    _WatchlistService_ListWatchlists_Handler,
		},
		{
			MethodName: "CreateWatchlist",
			Handler:    _WatchlistService_CreateWatchlist_Handler,
		},
		{
			MethodName: "UpdateWatchlist",
			Handler:    _WatchlistService_UpdateWatchlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watchlist/watchlist.proto",
}
